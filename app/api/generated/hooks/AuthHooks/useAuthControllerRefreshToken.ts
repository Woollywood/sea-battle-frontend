 
 
/* eslint-disable @typescript-eslint/ban-ts-comment */
 
// @ts-nocheck

/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  MutationObserverOptions,
  QueryClient,
} from '@tanstack/vue-query'
import type { MaybeRefOrGetter } from 'vue'
import type { RequestConfig, ResponseErrorConfig } from '@/api/client'
import type fetch from '@/api/client'
import type {
  AuthControllerRefreshTokenMutationRequest,
  AuthControllerRefreshTokenMutationResponse,
} from '../../types/AuthController/AuthControllerRefreshToken.ts'

import { useMutation } from '@tanstack/vue-query'

import { authControllerRefreshToken } from '../../clients/axios/AuthService/authControllerRefreshToken.ts'

export const authControllerRefreshTokenMutationKey = () =>
  [{ url: '/api/v1/auth/refresh' }] as const

export type AuthControllerRefreshTokenMutationKey = ReturnType<
  typeof authControllerRefreshTokenMutationKey
>

/**
 * {@link /api/v1/auth/refresh}
 */
export function useAuthControllerRefreshToken<TContext>(
  options: {
    mutation?: MutationObserverOptions<
      AuthControllerRefreshTokenMutationResponse,
      ResponseErrorConfig<Error>,
      {
        data: MaybeRefOrGetter<AuthControllerRefreshTokenMutationRequest>
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<
      RequestConfig<AuthControllerRefreshTokenMutationRequest>
    > & { client?: typeof fetch }
  } = {}
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey =
    mutationOptions?.mutationKey ??
    authControllerRefreshTokenMutationKey()

  return useMutation<
    AuthControllerRefreshTokenMutationResponse,
    ResponseErrorConfig<Error>,
    { data: AuthControllerRefreshTokenMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return authControllerRefreshToken(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient
  )
}
