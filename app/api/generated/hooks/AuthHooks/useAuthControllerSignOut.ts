 
 
/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-invalid-void-type */
// @ts-nocheck

/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  MutationObserverOptions,
  QueryClient,
} from '@tanstack/vue-query'
import type { RequestConfig, ResponseErrorConfig } from '@/api/client'
import type fetch from '@/api/client'
import type { AuthControllerSignOutMutationResponse } from '../../types/AuthController/AuthControllerSignOut.ts'

import { useMutation } from '@tanstack/vue-query'

import { authControllerSignOut } from '../../clients/axios/AuthService/authControllerSignOut.ts'

export const authControllerSignOutMutationKey = () =>
  [{ url: '/api/v1/auth/sign-out' }] as const

export type AuthControllerSignOutMutationKey = ReturnType<
  typeof authControllerSignOutMutationKey
>

/**
 * {@link /api/v1/auth/sign-out}
 */
export function useAuthControllerSignOut<TContext>(
  options: {
    mutation?: MutationObserverOptions<
      AuthControllerSignOutMutationResponse,
      ResponseErrorConfig<Error>,
      void,
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {}
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey =
    mutationOptions?.mutationKey ?? authControllerSignOutMutationKey()

  return useMutation<
    AuthControllerSignOutMutationResponse,
    ResponseErrorConfig<Error>,
    void,
    TContext
  >(
    {
      mutationFn: async () => {
        return authControllerSignOut(config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient
  )
}
