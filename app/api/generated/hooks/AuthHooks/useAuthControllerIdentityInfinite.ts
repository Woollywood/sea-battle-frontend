/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/ban-ts-comment */

// @ts-nocheck

/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  InfiniteData,
  InfiniteQueryObserverOptions,
  QueryClient,
  QueryKey,
  UseInfiniteQueryReturnType,
} from '@tanstack/vue-query'
import type { RequestConfig, ResponseErrorConfig } from '@/api/client'
import type fetch from '@/api/client'
import type { AuthControllerIdentityQueryResponse } from '../../types/AuthController/AuthControllerIdentity.ts'

import {
  infiniteQueryOptions,
  useInfiniteQuery,
} from '@tanstack/vue-query'

import { authControllerIdentity } from '../../clients/axios/AuthService/authControllerIdentity.ts'

export const authControllerIdentityInfiniteQueryKey = () =>
  [{ url: '/api/v1/auth/identity' }] as const

export type AuthControllerIdentityInfiniteQueryKey = ReturnType<
  typeof authControllerIdentityInfiniteQueryKey
>

export function authControllerIdentityInfiniteQueryOptions(
  config: Partial<RequestConfig> & { client?: typeof fetch } = {}
) {
  const queryKey = authControllerIdentityInfiniteQueryKey()
  return infiniteQueryOptions<
    AuthControllerIdentityQueryResponse,
    ResponseErrorConfig<Error>,
    AuthControllerIdentityQueryResponse,
    typeof queryKey,
    number
  >({
    queryKey,
    queryFn: async ({ signal, pageParam }) => {
      config.signal = signal

      return authControllerIdentity(config)
    },
    initialPageParam: 1,
    getNextPageParam: (lastPage) => lastPage['nextCursor'],
    getPreviousPageParam: (firstPage) => firstPage['nextCursor'],
  })
}

/**
 * {@link /api/v1/auth/identity}
 */
export function useAuthControllerIdentityInfinite<
  TData = InfiniteData<AuthControllerIdentityQueryResponse>,
  TQueryData = AuthControllerIdentityQueryResponse,
  TQueryKey extends QueryKey = AuthControllerIdentityInfiniteQueryKey,
>(
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        AuthControllerIdentityQueryResponse,
        ResponseErrorConfig<Error>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {}
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey =
    queryOptions?.queryKey ?? authControllerIdentityInfiniteQueryKey()

  const query = useInfiniteQuery(
    {
      ...authControllerIdentityInfiniteQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as InfiniteQueryObserverOptions,
    queryClient
  ) as UseInfiniteQueryReturnType<
    TData,
    ResponseErrorConfig<Error>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}
