 
 
/* eslint-disable @typescript-eslint/ban-ts-comment */
 
// @ts-nocheck

/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  QueryClient,
  QueryKey,
  QueryObserverOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'
import type { RequestConfig, ResponseErrorConfig } from '@/api/client'
import type fetch from '@/api/client'
import type { AuthControllerIdentityQueryResponse } from '../../types/AuthController/AuthControllerIdentity.ts'

import { queryOptions, useQuery } from '@tanstack/vue-query'
import { toValue } from 'vue'

import { authControllerIdentity } from '../../clients/axios/AuthService/authControllerIdentity.ts'

export const authControllerIdentityQueryKey = () =>
  [{ url: '/api/v1/auth/identity' }] as const

export type AuthControllerIdentityQueryKey = ReturnType<
  typeof authControllerIdentityQueryKey
>

export function authControllerIdentityQueryOptions(
  config: Partial<RequestConfig> & { client?: typeof fetch } = {}
) {
  const queryKey = authControllerIdentityQueryKey()
  return queryOptions<
    AuthControllerIdentityQueryResponse,
    ResponseErrorConfig<Error>,
    AuthControllerIdentityQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return authControllerIdentity(toValue(config))
    },
  })
}

/**
 * {@link /api/v1/auth/identity}
 */
export function useAuthControllerIdentity<
  TData = AuthControllerIdentityQueryResponse,
  TQueryData = AuthControllerIdentityQueryResponse,
  TQueryKey extends QueryKey = AuthControllerIdentityQueryKey,
>(
  options: {
    query?: Partial<
      QueryObserverOptions<
        AuthControllerIdentityQueryResponse,
        ResponseErrorConfig<Error>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {}
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey =
    queryOptions?.queryKey ?? authControllerIdentityQueryKey()

  const query = useQuery(
    {
      ...authControllerIdentityQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient
  ) as UseQueryReturnType<TData, ResponseErrorConfig<Error>> & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}
