/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/ban-ts-comment */

// @ts-nocheck

/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  InfiniteData,
  InfiniteQueryObserverOptions,
  QueryClient,
  QueryKey,
  UseInfiniteQueryReturnType,
} from '@tanstack/vue-query'
import type { MaybeRefOrGetter } from 'vue'
import type { RequestConfig, ResponseErrorConfig } from '@/api/client'
import type fetch from '@/api/client'
import type {
  AuthControllerGoogleProviderQueryParams,
  AuthControllerGoogleProviderQueryResponse,
} from '../../types/AuthController/AuthControllerGoogleProvider.ts'

import {
  infiniteQueryOptions,
  useInfiniteQuery,
} from '@tanstack/vue-query'

import { authControllerGoogleProvider } from '../../clients/axios/AuthService/authControllerGoogleProvider.ts'

export const authControllerGoogleProviderInfiniteQueryKey = (
  params: MaybeRefOrGetter<AuthControllerGoogleProviderQueryParams>
) =>
  [
    { url: '/api/v1/auth/providers/google' },
    ...(params ? [params] : []),
  ] as const

export type AuthControllerGoogleProviderInfiniteQueryKey = ReturnType<
  typeof authControllerGoogleProviderInfiniteQueryKey
>

export function authControllerGoogleProviderInfiniteQueryOptions(
  params: MaybeRefOrGetter<AuthControllerGoogleProviderQueryParams>,
  config: Partial<RequestConfig> & { client?: typeof fetch } = {}
) {
  const queryKey =
    authControllerGoogleProviderInfiniteQueryKey(params)
  return infiniteQueryOptions<
    AuthControllerGoogleProviderQueryResponse,
    ResponseErrorConfig<Error>,
    AuthControllerGoogleProviderQueryResponse,
    typeof queryKey,
    number
  >({
    enabled: !!params,
    queryKey,
    queryFn: async ({ signal, pageParam }) => {
      config.signal = signal

      if (params) {
        params['page'] =
          pageParam as unknown as AuthControllerGoogleProviderQueryParams['page']
      }
      return authControllerGoogleProvider(params, config)
    },
    initialPageParam: 1,
    getNextPageParam: (lastPage) => lastPage['nextCursor'],
    getPreviousPageParam: (firstPage) => firstPage['nextCursor'],
  })
}

/**
 * {@link /api/v1/auth/providers/google}
 */
export function useAuthControllerGoogleProviderInfinite<
  TData = InfiniteData<AuthControllerGoogleProviderQueryResponse>,
  TQueryData = AuthControllerGoogleProviderQueryResponse,
  TQueryKey extends
    QueryKey = AuthControllerGoogleProviderInfiniteQueryKey,
>(
  params: MaybeRefOrGetter<AuthControllerGoogleProviderQueryParams>,
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        AuthControllerGoogleProviderQueryResponse,
        ResponseErrorConfig<Error>,
        TData,
        TQueryKey
      >
    > & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {}
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey =
    queryOptions?.queryKey ??
    authControllerGoogleProviderInfiniteQueryKey(params)

  const query = useInfiniteQuery(
    {
      ...authControllerGoogleProviderInfiniteQueryOptions(
        params,
        config
      ),
      queryKey,
      ...queryOptions,
    } as unknown as InfiniteQueryObserverOptions,
    queryClient
  ) as UseInfiniteQueryReturnType<
    TData,
    ResponseErrorConfig<Error>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}
