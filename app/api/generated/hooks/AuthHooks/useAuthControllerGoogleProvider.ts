 
 
/* eslint-disable @typescript-eslint/ban-ts-comment */
 
// @ts-nocheck

/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  QueryClient,
  QueryKey,
  QueryObserverOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'
import type { MaybeRefOrGetter } from 'vue'
import type { RequestConfig, ResponseErrorConfig } from '@/api/client'
import type fetch from '@/api/client'
import type {
  AuthControllerGoogleProviderQueryParams,
  AuthControllerGoogleProviderQueryResponse,
} from '../../types/AuthController/AuthControllerGoogleProvider.ts'

import { queryOptions, useQuery } from '@tanstack/vue-query'
import { toValue } from 'vue'

import { authControllerGoogleProvider } from '../../clients/axios/AuthService/authControllerGoogleProvider.ts'

export const authControllerGoogleProviderQueryKey = (
  params: MaybeRefOrGetter<AuthControllerGoogleProviderQueryParams>
) =>
  [
    { url: '/api/v1/auth/providers/google' },
    ...(params ? [params] : []),
  ] as const

export type AuthControllerGoogleProviderQueryKey = ReturnType<
  typeof authControllerGoogleProviderQueryKey
>

export function authControllerGoogleProviderQueryOptions(
  params: MaybeRefOrGetter<AuthControllerGoogleProviderQueryParams>,
  config: Partial<RequestConfig> & { client?: typeof fetch } = {}
) {
  const queryKey = authControllerGoogleProviderQueryKey(params)
  return queryOptions<
    AuthControllerGoogleProviderQueryResponse,
    ResponseErrorConfig<Error>,
    AuthControllerGoogleProviderQueryResponse,
    typeof queryKey
  >({
    enabled: !!params,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return authControllerGoogleProvider(
        toValue(params),
        toValue(config)
      )
    },
  })
}

/**
 * {@link /api/v1/auth/providers/google}
 */
export function useAuthControllerGoogleProvider<
  TData = AuthControllerGoogleProviderQueryResponse,
  TQueryData = AuthControllerGoogleProviderQueryResponse,
  TQueryKey extends QueryKey = AuthControllerGoogleProviderQueryKey,
>(
  params: MaybeRefOrGetter<AuthControllerGoogleProviderQueryParams>,
  options: {
    query?: Partial<
      QueryObserverOptions<
        AuthControllerGoogleProviderQueryResponse,
        ResponseErrorConfig<Error>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {}
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey =
    queryOptions?.queryKey ??
    authControllerGoogleProviderQueryKey(params)

  const query = useQuery(
    {
      ...authControllerGoogleProviderQueryOptions(params, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient
  ) as UseQueryReturnType<TData, ResponseErrorConfig<Error>> & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}
